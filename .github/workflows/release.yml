name: Create Release

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Needed to create and update releases
  issues: read     # Needed if Release Drafter uses issues
  deployments: write  # If your workflow needs deployment permissions

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest version
        id: get_latest_version
        run: |
          echo "Fetching latest tag..."
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "Latest tag raw output: $(gh release list --limit 1 --json tagName --jq '.[0].tagName')"
          if [[ -z "$latest_tag" ]]; then
            echo "No tags found. Setting initial version to 1.0.0"
            latest_tag="1.0.0"
            echo "initial_version=true" >> $GITHUB_ENV
          else
            echo "initial_version=false" >> $GITHUB_ENV
          fi
          echo "Latest tag is: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create initial tag if none exists
        if: env.initial_version == 'true'
        run: |
          echo "Creating initial tag 1.0.0..."
          git tag 1.0.0
          git push origin 1.0.0
          echo "Initial tag created."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch type
        id: get_branch_type
        run: |
          echo "Extracting branch name from commit message..."
          branch_name=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH" | grep -oP 'Merge pull request #[0-9]+ from \K\S+')
          branch_name=$(echo "$branch_name" | sed 's/^[^/]*\///')
          echo "Branch name extracted: $branch_name"
          if [[ "$branch_name" == release/* ]]; then
            branch_type="release"
            config_file="release-drafter-minor.yml"
          elif [[ "$branch_name" == hotfix/* ]]; then
            branch_type="hotfix"
            config_file="release-drafter-patch.yml"
          else
            echo "Branch does not match expected patterns"
            exit 1
          fi
          echo "Branch type determined: $branch_type"
          echo "branch_type=$branch_type" >> $GITHUB_ENV
          echo "config_file=$config_file" >> $GITHUB_ENV

      - name: Debug latest_tag and branch_type
        run: |
          echo "latest_tag is: ${{ env.latest_tag }}"
          echo "branch_type is: ${{ env.branch_type }}"
          echo "initial_version is: ${{ env.initial_version }}"

      - name: Determine whether to increment version
        id: determine_increment
        if: env.latest_tag != '' && env.initial_version == 'false'
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"
      
          if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
            echo "Error: latest_tag is not in the expected format."
            exit 1
          fi
      
          echo "Current version: $major.$minor.$patch"
          if [[ "${{ env.branch_type }}" == "release" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "${{ env.branch_type }}" == "hotfix" ]]; then
            patch=$((patch + 1))
          else
            echo "Unknown branch type"
            exit 1
          fi
          new_tag="$major.$minor.$patch"
          echo "New tag calculated: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
        env:
          latest_tag: ${{ env.latest_tag }}
          branch_type: ${{ env.branch_type }}

      - name: Draft Release Notes (Minor or Patch)
        uses: release-drafter/release-drafter@v5
        with:
          config-name: ${{ env.config_file }}  # Use correct drafter file based on branch type
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Wait for Release Notes to be Drafted
        run: sleep 10 # Adjust if needed to ensure notes are drafted

      - name: List All Releases
        run: |
          gh release list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check and Update Release Draft
        run: |
          echo "Checking if release draft exists for tag ${{ env.new_tag }}..."
          release_id=$(gh release view ${{ env.new_tag }} --json id --jq '.id' || echo "not found")
          echo "Release ID: $release_id"
          
          if [ "$release_id" = "not found" ]; then
            echo "No release draft found with tag ${{ env.new_tag }}"
            exit 1
          fi
      
          echo "Updating release draft with notes..."
          notes=$(gh release view ${{ env.new_tag }} --json body --jq '.body' || echo "No notes found")
          echo "Notes: $notes"
          
          gh release edit ${{ env.new_tag }} --notes "$notes" --title "Release ${{ env.new_tag }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        id: publish_release
        run: |
          if [[ "${{ env.initial_version }}" == "true" ]]; then
            echo "Publishing initial version release (1.0.0)..."
            gh release create 1.0.0 --title "Initial Release 1.0.0" --target main --draft=false
            echo "Initial release 1.0.0 published."
          else
            echo "Publishing new release ${{ env.new_tag }}..."
            gh release edit ${{ env.new_tag }} --draft=false
            echo "Release published: ${{ env.new_tag }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rebase develop with main for hotfixes
        if: env.branch_type == 'hotfix'
        run: |
          echo "Rebasing develop with main..."
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin develop
          git checkout develop
          git rebase origin/main
          git push origin develop --force-with-lease
          echo "Rebase complete and pushed"

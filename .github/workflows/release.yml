name: Create Release
on:
  push:
    branches:
      - main

permissions:
  contents: write  # Needed to create and update releases
  issues: read     # Needed if Release Drafter uses issues
  deployments: write  # If your workflow needs deployment permissions

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure that we have all tags

      # Step 2: Get latest version
      - name: Get latest version
        id: get_latest_version
        run: |
          echo "Fetching latest tag..."
          # Fetch the latest tag from the releases list
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          # Debug output to verify latest_tag
          echo "Latest tag raw output: $(gh release list --limit 1 --json tagName --jq '.[0].tagName')"
          if [[ -z "$latest_tag" ]]; then
            # If no tags found, set initial version to 1.0.0
            echo "No tags found. Setting initial version to 1.0.0"
            latest_tag="1.0.0"
            echo "initial_version=true" >> $GITHUB_ENV
          else
            echo "initial_version=false" >> $GITHUB_ENV
          fi
          echo "Latest tag is: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Create initial tag if none exists
      - name: Create initial tag if none exists
        if: env.initial_version == 'true'
        run: |
          echo "Creating initial tag 1.0.0..."
          # Create and push the initial tag if no tags exist
          git tag 1.0.0
          git push origin 1.0.0
          echo "Initial tag created."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Get branch type
      - name: Get branch type
        id: get_branch_type
        run: |
          echo "Extracting branch name from commit message..."
          # Extract branch name from the commit message using jq
          branch_name=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH" | grep -oP 'Merge pull request #[0-9]+ from \K\S+')
          branch_name=$(echo "$branch_name" | sed 's/^[^/]*\///')
          echo "Branch name extracted: $branch_name"
          # Determine branch type and select configuration file accordingly
          if [[ "$branch_name" == release/* ]]; then
            branch_type="release"
            config_file="release-drafter-minor.yml"
          elif [[ "$branch_name" == hotfix/* ]]; then
            branch_type="hotfix"
            config_file="release-drafter-patch.yml"
          else
            echo "Branch does not match expected patterns"
            exit 1
          fi
          echo "Branch type determined: $branch_type"
          echo "branch_type=$branch_type" >> $GITHUB_ENV
          echo "config_file=$config_file" >> $GITHUB_ENV

      # Step 5: Debugging step
      - name: Debug latest_tag and branch_type
        run: |
          # Debug output to verify the values of latest_tag and branch_type
          echo "latest_tag is: ${{ env.latest_tag }}"
          echo "branch_type is: ${{ env.branch_type }}"
          echo "initial_version is: ${{ env.initial_version }}"

      # Step 6: Determine whether to increment the version
      - name: Determine whether to increment version
        id: determine_increment
        if: env.latest_tag != '' && env.initial_version == 'false'
        run: |
          # Split the latest tag into major, minor, and patch components
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"

          if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
            echo "Error: latest_tag is not in the expected format."
            exit 1
          fi

          echo "Current version: $major.$minor.$patch"
          # Increment version based on branch type
          if [[ "${{ env.branch_type }}" == "release" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "${{ env.branch_type }}" == "hotfix" ]]; then
            patch=$((patch + 1))
          else
            echo "Unknown branch type"
            exit 1
          fi
          new_tag="$major.$minor.$patch"
          echo "New tag calculated: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
        env:
          latest_tag: ${{ env.latest_tag }}
          branch_type: ${{ env.branch_type }}

      # Step 7: Draft release notes
      - name: Draft Release Notes (Minor or Patch)
        uses: release-drafter/release-drafter@v5
        with:
          config-name: ${{ env.config_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Wait for Release Notes to be Drafted
      - name: Wait for Release Notes to be Drafted
        run: sleep 10
        # Wait to ensure Release Drafter has time to create the draft

      # Step 9: List all releases
      - name: List All Releases
        run: |
          gh release list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 10: Publish the release
      - name: Publish Release
        id: publish_release
        run: |
          echo "Publishing new release ${{ env.new_tag }}..."
          # Edit the draft release to set the tag and publish it
          gh release edit _DRAFT_ --tag ${{ env.new_tag }} --draft=false
          echo "Release published: ${{ env.new_tag }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 11: Rebase develop with main for hotfixes
      - name: Rebase develop with main for hotfixes
        if: env.branch_type == 'hotfix'
        run: |
          echo "Rebasing develop with main..."
          # Configure Git settings
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          # Fetch and rebase develop branch with the latest main
          git fetch origin develop
          git checkout develop
          git rebase origin/main
          git push origin develop --force-with-lease

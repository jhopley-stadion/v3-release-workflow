name: Create Confluence Release Notes
on:
  workflow_run:
    workflows: ["Create Release"]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Fetch the latest tag
      - name: Fetch the latest tag
        id: fetch_tag
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName -q '.[0].tagName')

          # Fetch the release notes
          release_notes=$(gh release view $latest_tag --json body --jq '.body')

          # Create a 'docs' folder if it doesn't exist
          mkdir -p docs

          # Save the release notes with the version number in the file name
          echo "${release_notes}" > "docs/Release v${latest_tag}.md"

          # Safely write multi-line release notes to GITHUB_ENV
          echo "releaseNotes<<EOF" >> $GITHUB_ENV
          echo "${release_notes}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Store the latest tag in GITHUB_ENV
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Load config from JSON and set environment variables
      - name: Load config from JSON
        id: load_config
        run: |
          projectName=$(jq -r '.projectName' workflow.config.json)
          confluenceBaseUrl=$(jq -r '.confluenceSettings.confluenceBaseUrl' workflow.config.json)
          confluenceSpaceName=$(jq -r '.confluenceSettings.spaceName' workflow.config.json)
          confluenceParentId=$(jq -r '.confluenceSettings.confluenceParentId' workflow.config.json)
          atlassianUserName=$(jq -r '.confluenceSettings.atlassianUserName' workflow.config.json)
          folderToPublish=$(jq -r '.confluenceSettings.folderToPublish' workflow.config.json)
          jiraBaseUrl=$(jq -r '.jiraSettings.jiraBaseUrl' workflow.config.json)
          jiraProjectKey=$(jq -r '.jiraSettings.jiraProjectKey' workflow.config.json)
          slackChannel=$(jq -r '.slackSettings.channel' workflow.config.json)

          # Export the values to the environment for the next steps
          echo "confluenceBaseUrl=$confluenceBaseUrl" >> $GITHUB_ENV
          echo "projectName=$projectName" >> $GITHUB_ENV
          echo "confluenceSpaceName=$confluenceSpaceName" >> $GITHUB_ENV
          echo "confluenceParentId=$confluenceParentId" >> $GITHUB_ENV
          echo "atlassianUserName=$atlassianUserName" >> $GITHUB_ENV
          echo "folderToPublish=$folderToPublish" >> $GITHUB_ENV
          echo "jiraBaseUrl=$jiraBaseUrl" >> $GITHUB_ENV
          echo "jiraProjectKey=$jiraProjectKey" >> $GITHUB_ENV
          echo "slackChannel=$slackChannel" >> $GITHUB_ENV

          # date
          echo "DATE=$(date +"%B %d, %Y")" >> $GITHUB_ENV

      # Step 4: Publish Markdown to Confluence
      - name: Publish Markdown to Confluence
        id: publish_confluence
        uses: markdown-confluence/publish-action@v5
        with:
          confluenceBaseUrl: ${{ env.confluenceBaseUrl }}
          confluenceParentId: ${{ env.confluenceParentId }} # You may need to replace this with the actual parent ID
          atlassianUserName: ${{ env.atlassianUserName }}
          atlassianApiToken: ${{ secrets.ATLASSIAN_API_TOKEN }}
          folderToPublish: ${{ env.folderToPublish }}

      - name: Get Confluence page ID
        id: get_page_id
        run: |
          # Construct the page title
          pageTitle="Release v${{ env.latest_tag }}"
          
          # Replace spaces with +
          encodedPageTitle="${pageTitle// /+}"
      
          # Construct the request URL
          requestUrl="${{ env.confluenceBaseUrl }}/wiki/rest/api/content?spaceKey=testspace&title=${encodedPageTitle}&expand=id"
      
          # Log the request URL for debugging
          echo "Making GET request to: $requestUrl"
      
          # Make a GET request to fetch the page details by title
          response=$(curl -s -u "john@stadion.io:${{ secrets.ATLASSIAN_API_TOKEN }}" "$requestUrl")
      
          # Log the response
          echo "Response: $response"
          
          # Extract the webui link from the response
          webuiLink=$(echo "$response" | jq -r '.results[0]._links.webui')
          
          # Check if the webui link was found
          if [ -z "$webuiLink" ] || [ "$webuiLink" == "null" ]; then
            echo "Error: WebUI link not found."
            exit 1
          fi
    
          # Save the webui link to an environment variable
          echo "confluencePageUrl=${{ env.confluenceBaseUrl }}/wiki${webuiLink}" >> $GITHUB_ENV
      
      # Step 6: Construct the full URL for the Confluence page (already done above) 
      - name: Construct Confluence URL
        id: construct_url
        run: |
          echo "Constructed Confluence Page URL: ${{ env.confluencePageUrl }}"
    

      - name: Format the release notes for Slack compatibility
        id: format_release_notes
        run: |
          formattedReleaseNotes=$(echo "${{ env.releaseNotes }}" | \
            sed ':a;N;$!ba;s/\n/\\n/g' \                                   # Replace newlines with \n for Slack formatting
                -e 's/# /*/g' \                                            # Convert headings (#) to bullet points (*)
                -e 's/"/\\"/g' \                                           # Escape double quotes
                -e 's/_/\\_/g' \                                           # Escape underscores
                -e 's/\*/\\*/g' \                                          # Escape asterisks
                -e 's/\`/\\`/g' \                                          # Escape backticks
                -e 's/\([0-9]\+\)\. /â€¢ /g' \                               # Convert numbered list to bullet points
                -e 's|\[\([^]]*\)\](\([^)]*\))|<\2|\1>|g'                  # Convert [text](link) to <link|text> for Slack
          )
          
          # Save formatted release notes to GITHUB_ENV
          echo "formattedReleaseNotes=${formattedReleaseNotes}" >> $GITHUB_ENV

      # Step 7: Send Slack notification with GitHub and JIRA buttons
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ env.slackChannel }}
          payload: |
            {
              "text": "Release notes for version ${{ env.latest_tag }} have been published to Confluence. :rocket:",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":rocket: Release v${{ env.latest_tag }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "text": "*${{ env.DATE }}*  |  ${{ env.projectName }}",
                      "type": "mrkdwn"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.formattedReleaseNotes }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View GitHub Release"
                      },
                      "url": "https://github.com/${{ github.repository }}/releases/tag/${{ env.latest_tag }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Confluence Release"
                      },
                      "url": "${{ env.confluencePageUrl }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
